// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sanita.Persistance;

#nullable disable

namespace Sanita.Persistance.Migrations
{
    [DbContext(typeof(SanitaDbContext))]
    [Migration("20240222194436_ModifiedByInactivatedByEditString")]
    partial class ModifiedByInactivatedByEditString
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.Property<int>("ExerciseListId")
                        .HasColumnType("int");

                    b.Property<int>("MusclesId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseListId", "MusclesId");

                    b.HasIndex("MusclesId");

                    b.ToTable("ExerciseMuscle");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.BodyParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Biceps")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Calf")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Chest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Forearm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Heigth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Hips")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Neck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Stomach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Thigh")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("Waist")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Weigth")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.ToTable("BodyParameters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Biceps = 0m,
                            Calf = 0m,
                            Chest = 0m,
                            Created = new DateTime(2024, 2, 23, 3, 44, 35, 904, DateTimeKind.Local).AddTicks(580),
                            CreatedBy = "test",
                            Forearm = 0m,
                            Heigth = 0m,
                            Hips = 0m,
                            InactivatedBy = "test",
                            ModifiedBy = "test",
                            Neck = 0m,
                            StatusId = 0,
                            Stomach = 0m,
                            Thigh = 0m,
                            UserId = 1,
                            Waist = 0m,
                            Weigth = 0m
                        });
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieUrl")
                        .IsRequired()
                        .HasMaxLength(80000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Fridge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MealProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Muscle");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FridgeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductInfoId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.HasIndex("MealId");

                    b.HasIndex("ProductInfoId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.ProductInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Kcal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.TrainingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainingTypes");
                });

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.HasOne("Sanita.Domain.Entities.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sanita.Domain.Entities.Muscle", null)
                        .WithMany()
                        .HasForeignKey("MusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("Sanita.Domain.Entities.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sanita.Domain.Entities.Training", null)
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId");

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Product", b =>
                {
                    b.HasOne("Sanita.Domain.Entities.Fridge", null)
                        .WithMany("Products")
                        .HasForeignKey("FridgeId");

                    b.HasOne("Sanita.Domain.Entities.Meal", null)
                        .WithMany("MealProducts")
                        .HasForeignKey("MealId");

                    b.HasOne("Sanita.Domain.Entities.ProductInfo", "ProductInfo")
                        .WithMany()
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.ProductInfo", b =>
                {
                    b.OwnsOne("Sanita.Domain.ValueObjects.Carbohydrates", "Carbohydrates", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Caffeine")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Caffeine");

                            b1.Property<decimal>("CarbohydratesNetto")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("CarbohydratesNetto");

                            b1.Property<decimal>("Choresterol")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Choresterol");

                            b1.Property<decimal>("Fiber")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Fiber");

                            b1.Property<decimal>("Salt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Salt");

                            b1.Property<decimal>("Sugars")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Sugars");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Fat", "Fat", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Monounsaturated")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Monounsaturated");

                            b1.Property<decimal>("Omega3Acid")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Omega3Acid");

                            b1.Property<decimal>("Omega6Acid")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Omega6Acid");

                            b1.Property<decimal>("Polyunsaturated")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Polyunsaturated");

                            b1.Property<decimal>("Saturated")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Saturated");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Mineral", "Mineral", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Calcium")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Calcium");

                            b1.Property<decimal>("Copper")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Copper");

                            b1.Property<decimal>("Iodine")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Iodine");

                            b1.Property<decimal>("Iron")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Iron");

                            b1.Property<decimal>("Magnesium")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Magnesium");

                            b1.Property<decimal>("Phosphorus")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Phosphorus");

                            b1.Property<decimal>("Potassium")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Potassium");

                            b1.Property<decimal>("Selenium")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Selenium");

                            b1.Property<decimal>("Sodium")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Sodium");

                            b1.Property<decimal>("Zinc")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Zinc");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Protein", "Protein", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Animal")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("AnimalProtein");

                            b1.Property<decimal>("Plant")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("PlantProtein");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Vitamin", "Vitamin", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Biotin")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("Biotin");

                            b1.Property<decimal>("FolidAcid")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("FolidAcid");

                            b1.Property<decimal>("VitaminA")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminA");

                            b1.Property<decimal>("VitaminB1")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminB1");

                            b1.Property<decimal>("VitaminB12")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminB12");

                            b1.Property<decimal>("VitaminB2")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminB2");

                            b1.Property<decimal>("VitaminB5")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminB5");

                            b1.Property<decimal>("VitaminB6")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminB6");

                            b1.Property<decimal>("VitaminC")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminC");

                            b1.Property<decimal>("VitaminD")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminD");

                            b1.Property<decimal>("VitaminE")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminE");

                            b1.Property<decimal>("VitaminK")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminK");

                            b1.Property<decimal>("VitaminPP")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("decimal(18,2)")
                                .HasDefaultValue(0m)
                                .HasColumnName("VitaminPP");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.Navigation("Carbohydrates")
                        .IsRequired();

                    b.Navigation("Fat")
                        .IsRequired();

                    b.Navigation("Mineral")
                        .IsRequired();

                    b.Navigation("Protein")
                        .IsRequired();

                    b.Navigation("Vitamin")
                        .IsRequired();
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Fridge", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Meal", b =>
                {
                    b.Navigation("MealProducts");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Training", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
