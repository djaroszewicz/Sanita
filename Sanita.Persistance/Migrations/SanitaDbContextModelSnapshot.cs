// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sanita.Persistance;

#nullable disable

namespace Sanita.Persistance.Migrations
{
    [DbContext(typeof(SanitaDbContext))]
    partial class SanitaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.Property<int>("ExerciseListId")
                        .HasColumnType("int");

                    b.Property<int>("MusclesId")
                        .HasColumnType("int");

                    b.HasKey("ExerciseListId", "MusclesId");

                    b.HasIndex("MusclesId");

                    b.ToTable("ExerciseMuscle");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.BodyParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Biceps")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Calf")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Chest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Forearm")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Heigth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Hips")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Neck")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Stomach")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Thigh")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Waist")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Weigth")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("BodyParameters");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTypeId");

                    b.HasIndex("TrainingId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.ExerciseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExerciseTypes");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Fridge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Fridges");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Meal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MealProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Muscle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Muscle");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FridgeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MealId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductInfoId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FridgeId");

                    b.HasIndex("MealId");

                    b.HasIndex("ProductInfoId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.ProductInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Kcal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ProductInfo");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Trainings");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.TrainingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TrainingTypes");
                });

            modelBuilder.Entity("ExerciseMuscle", b =>
                {
                    b.HasOne("Sanita.Domain.Entities.Exercise", null)
                        .WithMany()
                        .HasForeignKey("ExerciseListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sanita.Domain.Entities.Muscle", null)
                        .WithMany()
                        .HasForeignKey("MusclesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("Sanita.Domain.Entities.ExerciseType", "ExerciseType")
                        .WithMany()
                        .HasForeignKey("ExerciseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sanita.Domain.Entities.Training", null)
                        .WithMany("Exercises")
                        .HasForeignKey("TrainingId");

                    b.Navigation("ExerciseType");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Product", b =>
                {
                    b.HasOne("Sanita.Domain.Entities.Fridge", null)
                        .WithMany("Products")
                        .HasForeignKey("FridgeId");

                    b.HasOne("Sanita.Domain.Entities.Meal", null)
                        .WithMany("MealProducts")
                        .HasForeignKey("MealId");

                    b.HasOne("Sanita.Domain.Entities.ProductInfo", "ProductInfo")
                        .WithMany()
                        .HasForeignKey("ProductInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductInfo");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.ProductInfo", b =>
                {
                    b.OwnsOne("Sanita.Domain.ValueObjects.Carbohydrates", "Carbohydrates", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Caffeine")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("CarbohydratesNetto")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Choresterol")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Fiber")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Salt")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Sugars")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Fat", "Fat", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Monounsaturated")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Omega3Acid")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Omega6Acid")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Polyunsaturated")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Saturated")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Mineral", "Mineral", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Calcium")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Copper")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Iodine")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Iron")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Magnesium")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Phosphorus")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Potassium")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Selenium")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Sodium")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Zinc")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Protein", "Protein", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Animal")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("Plant")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.OwnsOne("Sanita.Domain.ValueObjects.Vitamin", "Vitamin", b1 =>
                        {
                            b1.Property<int>("ProductInfoId")
                                .HasColumnType("int");

                            b1.Property<decimal>("Biotin")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("FolidAcid")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminA")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminB1")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminB12")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminB2")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminB5")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminB6")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminC")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminD")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminE")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminK")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<decimal>("VitaminPP")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductInfoId");

                            b1.ToTable("ProductInfo");

                            b1.WithOwner()
                                .HasForeignKey("ProductInfoId");
                        });

                    b.Navigation("Carbohydrates")
                        .IsRequired();

                    b.Navigation("Fat")
                        .IsRequired();

                    b.Navigation("Mineral")
                        .IsRequired();

                    b.Navigation("Protein")
                        .IsRequired();

                    b.Navigation("Vitamin")
                        .IsRequired();
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Fridge", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Meal", b =>
                {
                    b.Navigation("MealProducts");
                });

            modelBuilder.Entity("Sanita.Domain.Entities.Training", b =>
                {
                    b.Navigation("Exercises");
                });
#pragma warning restore 612, 618
        }
    }
}
